package com.vhealth.dto;

import java.util.Arrays;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

public enum ResponseCode {
	SUCCESS(1000, "SUCCESS"),

	FAIL(1001, "FAIL"),

	BAD_CREDENTIALS(1002, "BAD_CREDENTIALS"),

	INVALID_PERMISSIONS(1003, "INVALID_PERMISSIONS"),

	BAD_REQUEST(1004, "BAD_REQUEST"),

	REQUEST_PARAMETER_TYPE_MISMATCH(1005, "REQUEST_PARAMETER_TYPE_MISMATCH"),

	MISSING_REQUEST_PARAMETER(1006, "MISSING_REQUEST_PARAMETER"),

	INVALID_CONTENT_TYPE(1007, "INVALID_CONTENT_TYPE"),

	UNKNOWN_ERROR_OCCURRED(1008, "UNKNOWN_ERROR_OCCURRED"),

	INVALID_DATE(1009, "INVALID_DATE"),

	INVALID_COMPANY(1010, "INVALID_COMPANY"),

	REFRESH_TOKEN_EXPIRED(1011, "REFRESH_TOKEN_EXPIRED"),

	ACCESS_TOKEN_EXPIRED(1012, "ACCESS_TOKEN_EXPIRED"),

	INVALID_ACCESS_TOKEN(1013, "INVALID_ACCESS_TOKEN"),

	UNAUTHORIZED_REQUEST(1014, "UNAUTHORIZED_REQUEST"),

	INVALID_SUBDOMAIN(1015, "INVALID_SUBDOMAIN"),

	NO_DATA_FOUND(1016, "NO_DATA_FOUND"),

	ERROR_STORING_DATA(1017, "ERROR_STORING_DATA"),

	INVALID_VALUE_FOR_REQUEST_PARAMETER(1018, "INVALID_VALUE_FOR_REQUEST_PARAMETER"),

	DUPLICATE_ENTRY(1019, "DUPLICATE_ENTRY"),

	INVALID_QUERY(1020, "INVALID_QUERY"),

	LOCKED_USER(1021, "LOCKED_USER"),

	INACTIVE_USER(1022, "INACTIVE_USER"),

	PASSWORD_EXPIRED(1023, "PASSWORD_EXPIRED"),

	DEACTIVATED_USER(1024, "DEACTIVATED_USER"),

	INVALID_PERMISSIONS_FOR_BRANCH(1025, "INVALID_PERMISSIONS_FOR_BRANCH"),

	INVALID_USER(1027, "INVALID_USER"),

	INVALID_ITEM_STATUS(1028, "INVALID_ITEM_STATUS"),

	NO_PENDING_ORDER_FOUND_IN_COMPANY(1029, "NO_PENDING_ORDER_FOUND_IN_COMPANY"),

	INVALID_PASSWORD(1030, "INVALID_PASSWORD"),

	OLD_PASSWORD_MISMATCH(1031, "OLD_PASSWORD_MISMATCH"),

	INVALID_CUSTOMER(1032, "INVALID_CUSTOMER"),

	NO_INTIME(1033, "NO_INTIME"),

	OUTTIME_BEFORE_INTIME(1034, "OUTTIME_BEFORE_INTIME"),

	NO_QUANTITY(1035, "NO_QUANTITY"),

	DENOMINATION_TOTAL_MISMATCH(1036, "DENOMINATION_TOTAL_MISMATCH"),

	INCOMPLETE_GRN(1037, "INCOMPLETE_GRN"),

	INVALID_QUANTITY_OR_QUANTITY_MISMATCH(1038, "INVALID_QUANTITY_OR_QUANTITY_MISMATCH"),

	DUPLICATE_INVOICE_NO(1039, "DUPLICATE_INVOICE_NO"),

	NO_OTP_PROVIDED(1040, "NO_OTP_PROVIDED"),

	INVALID_OTP(1041, "INVALID_OTP"),

	PO_CANNOT_BE_MODIFIED(1042, "PO_CANNOT_BE_MODIFIED"),

	SUMMARY_AND_DETAIL_NOT_MATCHING(1043, "SUMMARY_AND_DETAIL_NOT_MATCHING"),

	ORDER_CANNOT_BE_MODIFIED(1044, "ORDER_CANNOT_BE_MODIFIED"),

	APPROVER_AND_LAST_MODIFIED_CANNOT_BE_SAME(1045, "APPROVER_AND_LAST_MODIFIED_CANNOT_BE_SAME"),

	USER_ALREADY_EXISTS(1046, "USER_ALREADY_EXISTS"),

	COMPANY_ALREADY_EXISTS(1047, "COMPANY_ALREADY_EXISTS"),

	USER_DOES_NOT_EXIST(1048, "USER_DOES_NOT_EXIST"),

	OTP_SENT_TO_YOUR_EMAIL(1049, "OTP_SEND_TO_YOUR_EMAIL"),

	PASSWORD_UPDATED_SUCESSFULLY(1050, "PASSWORD_UPDATED_SUCESSFULLY"),

	OTP_EXPIRED(1051, "OTP_EXPIRED");
	;

	private final int code;

	private final String message;

	private static final Map<Integer, ResponseCode> responseCodeMap = Arrays.asList(ResponseCode.values()).stream()
			.collect(Collectors.toMap(ResponseCode::getCode, Function.identity()));

	ResponseCode(int code, String message) {
		this.code = code;
		this.message = message;
	}

	public int getCode() {
		return this.code;
	}

	public String getMessage() {
		return this.message;
	}

	public static ResponseCode valueOf(int value) {
		if (responseCodeMap.containsKey(value)) {
			return responseCodeMap.get(value);
		}
		throw new IllegalArgumentException("No matching constant for [" + value + "]");
	}

	@Override
	public String toString() {
		return this.code + " " + this.message;
	}
}
